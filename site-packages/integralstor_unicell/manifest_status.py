
import json, os, shutil, datetime, sys, re, netifaces, socket
import pprint
import integralstor_common
from integralstor_common import common, networking, command, hardware_utils, disks, zfs



def disk_info_and_status():

  all_disks = None
  try:
    out, err = hardware_utils.rescan_drives()
    if err:
      raise Exception(err)

    all_disks, err = disks.get_disk_info_all()
    if err:
      raise Exception(err)

    if all_disks:
      pool_list, err = zfs.get_pools()
      if pool_list:
        for sn, disk in all_disks.items():
          id = disk['id']
          found = False
          for pool in pool_list:
            if 'config' in pool and pool['config']:
             for sname, section in pool['config'].items():
              if not section:
                continue
              if ('components' not in section) or (not section['components']):
                continue
              for cname, component in section['components'].items():
                if 'type' in component and component['type'] == 'device' and component['name'] == id:
                  disk['pool'] = pool['pool_name']
                  found = True
                  break
              if found:
                break
            if found:
              break
  except Exception, e:
    return None, 'Error retrieving disk information and status : %s'%str(e)
  else:
    return all_disks, None

    
def pool_status():
  pl = None
  try:
    pl, err = zfs.get_pools()
    if err:
      raise Exception(err)
  except Exception, e:
    return None, 'Error retrieving pool status : %s'%str(e)
  else:
    return pl, None

def interface_status():
  d = {}
  try:
    use_salt, err = common.use_salt()
    if err:
      raise Exception(err)
    if use_salt:
      import salt.modules.network, salt.modules.ps, salt.modules.status, salt.client
      d = salt.modules.network.interfaces()
    else:
      ifaces, err = networking.get_interfaces()
      if err:
        raise Exception(err)
      if ifaces:
        for iface_name, iface in ifaces.items():
          td = {}
          td['hwaddr'] = iface['addresses']['AF_LINK'][0]['addr']
          td['up'] = iface['up_status']
          if 'AF_INET' in iface['addresses'] and iface['addresses']['AF_INET'] and iface['addresses']['AF_INET'][0]:
            inet_list = []
            for inet in iface['addresses']['AF_INET']:
              inet_dict = {}
              if 'addr' in inet:
                inet_dict['address'] = inet['addr']
              if 'netmask' in inet:
                inet_dict['netmask'] = inet['netmask']
              if 'broadcast' in inet:
                inet_dict['broadcast'] = inet['broadcast']
              inet_dict['label'] = iface_name
              inet_list.append(inet_dict)
            td['inet'] = inet_list
          d[iface_name] = td
  except Exception, e:
    return None, 'Error retrieving interface status : %s'%str(e)
  else:
    return d, None

   
def load_avg():
  d = {}
  try:
    use_salt, err = common.use_salt()
    if err:
      raise Exception(err)
    if use_salt:
      import salt.modules.network, salt.modules.ps, salt.modules.status, salt.client
      d = salt.modules.status.loadavg()
    else:
      with open('/proc/loadavg', 'r') as f:
        line = f.readline()
        parts = line.split()
        if parts:
          d['1-min'] = float(parts[0])
          d['5-min'] = float(parts[1])
          d['15-min'] = float(parts[2])
    cores, err = _cpu_cores()
    if err:
      raise Exception(err)
    d["cpu_cores"] = int(cores)
  except Exception, e:
    return None, 'Error retrieving load average and CPU cores info : %s'%str(e)
  else:
    return d, None

def _cpu_cores():
  cores = -1
  try:
    use_salt, err = common.use_salt()
    if err:
      raise Exception(err)
    if use_salt:
      import salt.modules.network, salt.modules.ps, salt.modules.status, salt.client
      d = salt.modules.status.cpuinfo()
      if d:
        cores = d["cpu cores"]
    else:
      with open('/proc/cpuinfo', 'r') as f:
        lines = f.readlines()
        for line in lines:
          ret = re.match('\s*cpu cores\s*:[\s]*([\d]+)$', line.strip())
          if ret:
            grps = ret.groups()
            if grps:
              cores = int(grps[0].strip())
  except Exception, e:
    return None, 'Error retrieving CPU cores information: %s'%str(e)
  else:
    return cores, None

def mem_info():
  ret = {}
  try:
    use_salt, err = common.use_salt()
    if err:
      raise Exception(err)
    if use_salt:
      import salt.modules.network, salt.modules.ps, salt.modules.status, salt.client
      d = salt.modules.status.meminfo()
      if d:
        if "MemTotal" in d:
          ret['mem_total'] = d['MemTotal']
        if "MemFree" in d:
          ret['mem_free'] = d['MemFree']
    else:
      mem_total = None
      mem_free = None
      with open('/proc/meminfo', 'r') as f:
        lines = f.readlines()
        for line in lines:
          match = re.match('MemTotal\s*:\s+([\S]+)\s+(\S+)$', line.strip())
          if match:
            grps = match.groups()
            if grps:
              mem_total = {}
              mem_total['unit'] = grps[1]
              mem_total['value'] = int(grps[0])
          match = re.match('MemFree\s*:\s+([\S]+)\s+(\S+)$', line.strip())
          if match:
            grps = match.groups()
            if grps:
              mem_free = {}
              mem_free['unit'] = grps[1]
              mem_free['value'] = int(grps[0])
          if mem_total and mem_free:
            break
      if not mem_total and not mem_free:
        raise Exception('Error retrieving memory information')
      ret['mem_total'] = mem_total
      ret['mem_free'] = mem_free
  except Exception, e:
    return None, 'Error retrieving memory information: %s'%str(e)
  else:
    return ret, None


def ipmi_status():
  ipmi_status = []
  try:
    fil = os.popen("ipmitool sdr")
    str4 = fil.read()
    lines = re.split("\r?\n", str4)
    ipmi_status = []
    for line in lines:
      l = line.rstrip()
      if not l:
        continue
      #print l
      comp_list = l.split('|')
      comp = comp_list[0].strip()
      status = comp_list[2].strip()
      if comp in["CPU Temp", "System Temp", "DIMMA1 Temp", "DIMMA2 Temp", "DIMMA3 Temp", "FAN1", "FAN2", "FAN3"] and status != "ns":
        td = {}
        td["reading"] = comp_list[1].strip()
        td["status"] = comp_list[2].strip()
        if comp == "CPU Temp":
          td["parameter_name"] = "CPU Temperature"
          td["component_name"] = "CPU"
        elif comp == "System Temp":
          td["parameter_name"] = "System Temperature"
          td["component_name"] = "System"
        elif comp == "DIMMA1 Temp":
          td["parameter_name"] = "Memory card 1 temperature"
          td["component_name"] = "Memory card 1"
        elif comp == "DIMMA2 Temp":
          td["parameter_name"] = "Memory card 2 temperature"
          td["component_name"] = "Memory card 2"
        elif comp == "DIMMA3 Temp":
          td["parameter_name"] = "Memory card 3 temperature"
          td["component_name"] = "Memory card 3"
        elif comp == "FAN1":
          td["parameter_name"] = "Fan 1 speed"
          td["component_name"] = "Fan 1"
        elif comp == "FAN2":
          td["parameter_name"] = "Fan 2 speed"
          td["component_name"] = "Fan 2"
        elif comp == "FAN3":
          td["parameter_name"] = "Fan 3 speed"
          td["component_name"] = "Fan 3"
        ipmi_status.append(td)
  except Exception, e:
    return None, 'Error retrieving IPMI information: %s'%str(e)
  else:
    return ipmi_status, None


def status():
  d = {}
  try:
    dis, err = disk_info_and_status()
    if err:
      raise Exception(err)
    d["disks"] = dis

    iface_status, err = interface_status()
    if err:
      raise Exception(err)
    d["interfaces"] = iface_status

    pl, err = zfs.get_pools()
    if err:
      raise Exception(err)
    d["pools"] = pl

    lavg, err = load_avg()
    if err:
      raise Exception(err)
    d["load_avg"] = lavg

    meminfo, err = mem_info()
    if err:
      raise Exception(err)
    d["mem_info"] = meminfo

    ipmi, err = ipmi_status()
    if err:
      raise Exception(err)
    d["ipmi_status"] = ipmi
  except Exception, e:
    return None, 'Error retrieving system status: %s'%str(e)
  else:
    return d, None


def generate_manifest_info():
  manifest_dict = None
  try:
    pp = pprint.PrettyPrinter(indent=4)

    use_salt, err = common.use_salt()
    if err:
      raise Exception(err)
    data = {}
    fqdn = socket.getfqdn()
    if use_salt:
      import salt.modules.network, salt.modules.ps, salt.modules.status, salt.client
      local = salt.client.LocalClient()
      data = local.cmd('*', 'grains.item', ['hwaddr_interfaces', 'mem_total', 'fqdn', 'cpu_model', 'roles'])
    else:
      data[fqdn] = {}
      hw_interfaces = {}
      ifaces, err = networking.get_interfaces()
      if err:
        raise Exception(err)
      if ifaces:
        for iface_name, iface in ifaces.items():
          hw_interfaces[iface_name] = iface['addresses']['AF_LINK'][0]['addr']
      data[fqdn]['hwaddr_interfaces'] = hw_interfaces

      mem_total = None
      with open('/proc/meminfo', 'r') as f:
        lines = f.readlines()
        for line in lines:
          ret = re.match('MemTotal\s*:\s+([\S]+)\s+(\S+)$', line.strip())
          if ret:
            grps = ret.groups()
            if grps:
              unit = grps[1]
              if unit == 'kB':
                mem_total = int(grps[0])/1024
      if not mem_total :
        raise Exception('Error retrieving memory information')
      else:
        data[fqdn]['mem_total'] = mem_total

      data[fqdn]['fqdn'] = fqdn

      cpu_model = None
      with open('/proc/cpuinfo', 'r') as f:
        lines = f.readlines()
        for line in lines:
          ret = re.match('\s*model name\s*:([\S\s]+)$', line.strip())
          if ret:
            grps = ret.groups()
            if grps:
              cpu_model = grps[0]
              break
      if not cpu_model :
        raise Exception('Error retrieving CPU information')
      else:
        data[fqdn]['cpu_model'] = cpu_model

    if not data:
      raise Exception('Error getting grains')
    #pp.pprint(data)

    dd = None
    if use_salt:
      dd = local.cmd('*', 'integralstor.disk_info_and_status')
    else:
      tmpdd, err = disk_info_and_status()
      if err:
        raise Exception(err)
      if tmpdd:
        dd = {}
        dd[fqdn] = tmpdd
    if not dd:
      raise Exception('Error getting disk info and status')
    #pp.pprint(dd)

    for node, diskinfo in dd.items():
      data[node]["disks"] = diskinfo

    manifest_dict = {}
    for k, v in data.items():
      v['interfaces'] = {}
      #Tweak the key names
      if v and 'hwaddr_interfaces' in v and v['hwaddr_interfaces'] :
        for int_name, mac_addr in v['hwaddr_interfaces'].items():
          d = {}
          d['mac_addr'] = mac_addr
          '''
          if 'ip_interfaces' in v and int_name in v['ip_interfaces']:
            d['ip_addr'] = v['ip_interfaces'][int_name]
          else:
            d['ip_addr'] = []
          '''
          v['interfaces'][int_name] = d 
  
        v.pop('hwaddr_interfaces', None)
        #v.pop('ip_interfaces', None)
      manifest_dict[k] = v
  except Exception, e:
    return None, 'Error generating the manifest : %s'%str(e)
  else:
    return manifest_dict, None


def generate_status_info(path):
  status_dict = None
  try:
    pp = pprint.PrettyPrinter(indent=4)
  
    # First load the status 
    fqdn = socket.getfqdn()
    use_salt, err = common.use_salt()
    if err:
      raise Exception(err)
    if use_salt:
      import salt.modules.network, salt.modules.ps, salt.modules.status, salt.client
      local = salt.client.LocalClient()
      sd = local.cmd('*', 'integralstor.status')
    else:
      tmpsd, err = status()
      if err:
        raise Exception(err)
      sd = {}
      sd[fqdn] = tmpsd

    #pp.pprint(sd)
    if not sd:
      raise Exception('Did not get a response from salt')
    #pp.pprint(sd)
  
  
    # Load the manifest to check for discrepencies
    try :
      with open(path, 'r') as f:
        md = json.load(f)
    except Exception, e:
      raise Exception('Error reading the manifest file : %s'%str(e))
    #pp.pprint(md)
  
    status_dict = {}
  
    # Match the status against the manifest entries for discrepencies
    for hostname, d in md.items():
      #print hostname, len(hostname)
      temp_d = {}
      temp_d["errors"] = []
      node_status = 0
  
      if hostname not in sd.keys():
        node_status = -1
        #print "Not found in sd"
      else:
  
        # Process disk information
        disks = {}
        for disk_sn, disk in d["disks"].items():
          dd = {} 
          if disk_sn in sd[hostname]["disks"]:
            dd["status"] = sd[hostname]["disks"][disk_sn]["status"] 
            if dd["status"] != 'PASSED':
              node_status = 1
              temp_d["errors"].append("Disk with serial number %s on node %s is reporting SMART errors."%(disk_sn, hostname))
            dd["name"] = sd[hostname]["disks"][disk_sn]["name"] 
          else:
            dd["status"] = "Disk Missing"
            node_status = 1
            temp_d["errors"].append("Disk with serial number %s on node %s seems to be missing."%(disk_sn, hostname))
          disks[disk_sn] = dd
        for td in sd[hostname]["disks"].keys():
          new_disk = True
          if td in d["disks"]:
            new_disk = False
            break
          if new_disk:
            temp_d["errors"].append("New disk detected. Disk with serial number %s on node %s seems to be new."%(td, hostname))
            node_status = 2
        temp_d["disks"] = disks
        #pp.pprint(disks)


        # Process interface information
        interfaces = {}
        for ifname, ifdict in d["interfaces"].items():
          id = {}
          if ifname in sd[hostname]["interfaces"]:
            id["status"] =  sd[hostname]["interfaces"][ifname]["up"]
            if not sd[hostname]["interfaces"][ifname]["up"] != 'up':
              node_status = 1
              temp_d["errors"].append("Interface %s on node %s is not up."%(ifname, hostname))
            if "inet" in sd[hostname]["interfaces"][ifname]:
              id["inet"] = sd[hostname]["interfaces"][ifname]["inet"]
          else:
            id["status"] = "Interface Missing"
            node_status = 1
            temp_d["errors"].append("Interface with number %s on node %s seems to be missing."%(ifname, hostname))
          interfaces[ifname] = id
        temp_d["interfaces"] = interfaces

        if "mem_info" in sd[hostname]:
          if sd[hostname]["mem_info"]["mem_total"]["unit"] == "kB":
            sd[hostname]["mem_info"]["mem_total"]["value"] = str(int(sd[hostname]["mem_info"]["mem_total"]["value"])/1024)
            sd[hostname]["mem_info"]["mem_total"]["unit"] = "MB"
          if sd[hostname]["mem_info"]["mem_free"]["unit"] == "kB":
            sd[hostname]["mem_info"]["mem_free"]["value"] = str(int(sd[hostname]["mem_info"]["mem_free"]["value"])/1024)
            sd[hostname]["mem_info"]["mem_free"]["unit"] = "MB"
          temp_d["memory"] = sd[hostname]["mem_info"]
        if "disk_usage" in sd[hostname]:
          temp_d["disk_usage"] = sd[hostname]["disk_usage"]
        if "pools" in sd[hostname]:
          temp_d["pools"] = sd[hostname]["pools"]
        if "load_avg" in sd[hostname]:
          # To get around a django quirk of not recognising hyphens in dicts
          sd[hostname]["load_avg"]["15_min"] = sd[hostname]["load_avg"]["15-min"]
          sd[hostname]["load_avg"]["5_min"] = sd[hostname]["load_avg"]["5-min"]
          sd[hostname]["load_avg"]["1_min"] = sd[hostname]["load_avg"]["1-min"]
          sd[hostname]["load_avg"].pop("15-min", None)
          sd[hostname]["load_avg"].pop("5-min", None)
          sd[hostname]["load_avg"].pop("1-min", None)
          temp_d["load_avg"] = sd[hostname]["load_avg"]
          if temp_d["load_avg"]['15_min'] >= temp_d["load_avg"]['cpu_cores']:
            temp_d["errors"].append("The load average (%d) on node %s has been high over the past 15 minutes."%(temp_d["load_avg"]['15_min'], hostname))
            node_status = "Degraded"
          if temp_d["load_avg"]['5_min'] >= temp_d["load_avg"]['cpu_cores']:
            temp_d["errors"].append("The load average (%d) on node %s has been high over the past 5 minutes."%(temp_d["load_avg"]['5_min'], hostname))
  
        if "cpu_model" in d:
          temp_d["cpu_model"] = d["cpu_model"]
    
        if "fqdn" in d:
          temp_d["fqdn"] = d["fqdn"] 
  
        temp_d["ipmi_status"] = sd[hostname]["ipmi_status"]
  
      temp_d["node_status"] = node_status
      if node_status == 0:
        temp_d["node_status_str"] = "Healthy"
      elif node_status == 1:
        temp_d["node_status_str"] = "Degraded"
      elif node_status == 2:
        temp_d["node_status_str"] = "New on-node hardware detected"
      elif node_status == -1:
        temp_d["node_status_str"] = "No response. Down?"
    
      status_dict[hostname]  = temp_d
    
      #pp.pprint(status_dict)
  except Exception, e:
    return None, 'Error generating status : %s'%str(e)
  else:
    return status_dict, None


def main():
  pp = pprint.PrettyPrinter(indent=4)
  #local = salt.client.LocalClient()
  #data = local.cmd('*', 'grains.item', ['hwaddr_interfaces', 'mem_total', 'fqdn', 'cpu_model', 'roles'])
  #print data
  #print generate_manifest_info()
  #print mem_info()
  #print interface_status()
  #pp.pprint(status())
  #pp.pprint(generate_manifest_info())
  #generate_manifest_info()
  #pp.pprint(interface_status())
  pp.pprint(generate_status_info('/opt/integralstor/integralstor-unicell/config/status/master.manifest'))
  #generate_status_info('/opt/integralstor/integralstor-unicell/config/status/master.manifest')

if __name__ == "__main__":
  ret = main()
  sys.exit(ret)
