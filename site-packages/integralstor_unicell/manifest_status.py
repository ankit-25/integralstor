
import salt.client
import json, os, shutil, datetime, sys, re
import pprint

def generate_manifest_info():
  manifest_dict = None
  try:
    pp = pprint.PrettyPrinter(indent=4)

    local = salt.client.LocalClient()
    data = local.cmd('*', 'grains.item', ['hwaddr_interfaces', 'mem_total', 'fqdn', 'cpu_model', 'roles'])
    if not data:
      raise Exception('Error getting grains')
    #pp.pprint(data)

    dd = local.cmd('*', 'integralstor.disk_info_and_status')
    if not data:
      raise Exception('Error getting disk info and status')
    #pp.pprint dd

    for node, diskinfo in dd.items():
      data[node]["disks"] = diskinfo

    manifest_dict = {}
    for k, v in data.items():
      #print k
      v['interfaces'] = {}
      #Tweak the key names
      if v and 'hwaddr_interfaces' in v and v['hwaddr_interfaces'] :
        for int_name, mac_addr in v['hwaddr_interfaces'].items():
          d = {}
          d['mac_addr'] = mac_addr
          '''
          if 'ip_interfaces' in v and int_name in v['ip_interfaces']:
            d['ip_addr'] = v['ip_interfaces'][int_name]
          else:
            d['ip_addr'] = []
          '''
          v['interfaces'][int_name] = d 
  
        v.pop('hwaddr_interfaces', None)
        #v.pop('ip_interfaces', None)
      manifest_dict[k] = v
  except Exception, e:
    return None, 'Error generating the manifest : %s'%str(e)
  else:
    return manifest_dict, None


def generate_status_info(path):
  status_dict = None
  try:
    pp = pprint.PrettyPrinter(indent=4)
  
    # First load the status 
    local = salt.client.LocalClient()

    sd = local.cmd('*', 'integralstor.status')
    #pp.pprint(sd)
    if not sd:
      raise Exception('Did not get a response from salt')
    #pp.pprint(sd)
  
  
    # Load the manifest to check for discrepencies
    try :
      with open(path, 'r') as f:
        md = json.load(f)
    except Exception, e:
      raise Exception('Error reading the manifest file : %s'%str(e))
    #pp.pprint(md)
  
    status_dict = {}
  
    # Match the status against the manifest entries for discrepencies
    for hostname, d in md.items():
      #print hostname, len(hostname)
      temp_d = {}
      temp_d["errors"] = []
      node_status = 0
  
      if hostname not in sd.keys():
        node_status = -1
        #print "Not found in sd"
      else:
  
        # Process disk information
        disks = {}
        for disk_sn, disk in d["disks"].items():
          dd = {} 
          if disk_sn in sd[hostname]["disks"]:
            dd["status"] = sd[hostname]["disks"][disk_sn]["status"] 
            if dd["status"] != 'PASSED':
              node_status = 1
              temp_d["errors"].append("Disk with serial number %s on node %s is reporting SMART errors."%(disk_sn, hostname))
            dd["name"] = sd[hostname]["disks"][disk_sn]["name"] 
          else:
            dd["status"] = "Disk Missing"
            node_status = 1
            temp_d["errors"].append("Disk with serial number %s on node %s seems to be missing."%(disk_sn, hostname))
          disks[disk_sn] = dd
        for td in sd[hostname]["disks"].keys():
          new_disk = True
          if td in d["disks"]:
            new_disk = False
            break
          if new_disk:
            temp_d["errors"].append("New disk detected. Disk with serial number %s on node %s seems to be new."%(td, hostname))
            node_status = 2
        temp_d["disks"] = disks
        #pp.pprint(disks)


        # Process interface information
        interfaces = {}
        for ifname, ifdict in d["interfaces"].items():
          id = {}
          if ifname in sd[hostname]["interfaces"]:
            if sd[hostname]["interfaces"][ifname]["up"]:
              id["status"] = "up"
            else:
              id["status"] = "down"
            if not sd[hostname]["interfaces"][ifname]["up"] :
              node_status = 1
              temp_d["errors"].append("Interface %s on node %s is not up."%(ifname, hostname))
            if "inet" in sd[hostname]["interfaces"][ifname]:
              id["inet"] = sd[hostname]["interfaces"][ifname]["inet"]
          else:
            id["status"] = "Interface Missing"
            node_status = 1
            temp_d["errors"].append("Interface with number %s on node %s seems to be missing."%(ifname, hostname))
          interfaces[ifname] = id
        temp_d["interfaces"] = interfaces

        if "mem_info" in sd[hostname]:
          if sd[hostname]["mem_info"]["mem_total"]["unit"] == "kB":
            sd[hostname]["mem_info"]["mem_total"]["value"] = str(int(sd[hostname]["mem_info"]["mem_total"]["value"])/1024)
            sd[hostname]["mem_info"]["mem_total"]["unit"] = "MB"
          if sd[hostname]["mem_info"]["mem_free"]["unit"] == "kB":
            sd[hostname]["mem_info"]["mem_free"]["value"] = str(int(sd[hostname]["mem_info"]["mem_free"]["value"])/1024)
            sd[hostname]["mem_info"]["mem_free"]["unit"] = "MB"
          temp_d["memory"] = sd[hostname]["mem_info"]
        if "disk_usage" in sd[hostname]:
          temp_d["disk_usage"] = sd[hostname]["disk_usage"]
        if "pools" in sd[hostname]:
          temp_d["pools"] = sd[hostname]["pools"]
        if "load_avg" in sd[hostname]:
          # To get around a django quirk of not recognising hyphens in dicts
          sd[hostname]["load_avg"]["15_min"] = sd[hostname]["load_avg"]["15-min"]
          sd[hostname]["load_avg"]["5_min"] = sd[hostname]["load_avg"]["5-min"]
          sd[hostname]["load_avg"]["1_min"] = sd[hostname]["load_avg"]["1-min"]
          sd[hostname]["load_avg"].pop("15-min", None)
          sd[hostname]["load_avg"].pop("5-min", None)
          sd[hostname]["load_avg"].pop("1-min", None)
          temp_d["load_avg"] = sd[hostname]["load_avg"]
          if temp_d["load_avg"]['15_min'] >= temp_d["load_avg"]['cpu_cores']:
            temp_d["errors"].append("The load average (%d) on node %s has been high over the past 15 minutes."%(temp_d["load_avg"]['15_min'], hostname))
            node_status = "Degraded"
          if temp_d["load_avg"]['5_min'] >= temp_d["load_avg"]['cpu_cores']:
            temp_d["errors"].append("The load average (%d) on node %s has been high over the past 5 minutes."%(temp_d["load_avg"]['5_min'], hostname))
  
        if "cpu_model" in d:
          temp_d["cpu_model"] = d["cpu_model"]
    
        if "fqdn" in d:
          temp_d["fqdn"] = d["fqdn"] 
  
        temp_d["ipmi_status"] = sd[hostname]["ipmi_status"]
  
      temp_d["node_status"] = node_status
      if node_status == 0:
        temp_d["node_status_str"] = "Healthy"
      elif node_status == 1:
        temp_d["node_status_str"] = "Degraded"
      elif node_status == 2:
        temp_d["node_status_str"] = "New on-node hardware detected"
      elif node_status == -1:
        temp_d["node_status_str"] = "No response. Down?"
    
      status_dict[hostname]  = temp_d
    
      #pp.pprint(status_dict)
  except Exception, e:
    return None, 'Error generating status : %s'%str(e)
  else:
    return status_dict, None


def main():
  pp = pprint.PrettyPrinter(indent=4)
  #pp.pprint(generate_manifest_info())
  pp.pprint(generate_status_info('/opt/integralstor/integralstor-unicell/mnt/admin_vol/status/master.manifest'))

if __name__ == "__main__":
  ret = main()
  sys.exit(ret)
