import shutil, os

def load_exports_list():
  ''' Return a list of all NFS exports defined in /etc/exports '''
  l = []
  try:
    with open('/etc/exports', 'r') as f:
      for line in f:
        d, err = process_export(line)
        if not d:
          e = 'Error processing NFS export : '
          if err:
            e = '%s : %s'%(e, err)
          raise Exception(e)
        else:
          #print d
          l.append(d)
  except Exception, e:
    return None, 'Error retrieving export list : %s'%str(e)
  else:
    return l, None

def process_export(line):
  ''' Given a line from the /etc/exports file, return a dict with all relavant info '''
  d = {}
  try:
    components = line.split()
    if not components:
      return None, 'Error parsing NFS export enrty : %s'%line
    d['clients'] = []
    #print range(len(components))
    for i in range(len(components)):
      #print i
      #print components[i]
      if i == 0:
        d['path'] = components[i]
        continue
      if components[i][0] == '(':
        options = components[i].replace(r'(', '')
        options = options.replace(r')', '')
        options_list = options.split(',')
        d['options'] = options_list
        #print 'options', options_list
        continue
      # Else its an access control line
      # This could have an options specific to it so parse for that
      tmpd = {}
      if r'(' in components[i]:
        spos = components[i].index(r'(')
        if r')' not in components[i]:
          raise Exception('Malformed NFS export entry : %s'%line)
        epos = components[i].index(r')')
        #print spos, epos
        name = components[i][0:spos]
        options_str = components[i][spos+1:epos]
        #print options_str
        tmpd['options'] = options_str.split(',')
      else:
        name = components[i]
      tmpd['name'] = name
      d['clients'].append(tmpd)
  except Exception, e:
    return None, 'Error retrieving export entry : %s'%str(e)
  else:
    return d, None

def get_share(path, share_list=None):
  
  d = None
  try:
    if not path:
      raise Exception('Share path not specified')
    if not share_list:
      share_list, err = load_exports_list
      if not share_list:
        if err:
          raise Exception(err)
        else:
          raise Exception('Error getting share list')

    for share in share_list:
      if share['path'] == path:
        d = share
        break
  except Exception, e:
    return None, str(e)
  else:
    return d, None
    
def delete_share(path, share_list = None):
  l = []
  result = False
  try:
    if not share_list:
      share_list, err = load_exports_list()
      if not share_list:
        if err:
          raise Exception(err)
        else:
          raise Exception('Error getting share list')
    for share in share_list:
      if share['path'] == path:
        continue
      else:
        l.append(share)
    result, err = generate_exports_file(l)
  except Exception, e:
    return result, str(e)
  else:
    return result, None

def generate_exports_file(shares):
  result = False
  try:
    print 'here'
    with open('/tmp/new_exports', 'w') as f:
      print 'here1'
      for s in shares:
        print 'here2'
        genstr = s['path']
        print '1'
        for client in s['clients']:
          genstr += ' '
          print '11'
          genstr += client['name']
          if 'options' in client:
            genstr += '('
            for option in client['options']:
              genstr += '%s,'%option
            genstr = genstr[0:len(genstr)-1]
            genstr += ')'
        print '2'
        if 'options' in s:
          genstr += ' '
          genstr += '('
          for option in s['options']:
            print '21'
            genstr += '%s,'%option
          genstr = genstr[0:len(genstr)-1]
          genstr += ')'
        print '3'
        genstr += '\n'
        f.write(genstr)
        f.flush()
    print 'here3'
    shutil.copyfile('/tmp/new_exports', '/etc/exports')
    os.remove('/tmp/new_exports')
    result = True
  except Exception, e:
    return result, str(e)
  else:
    return result, None

def main():
  l, err = load_exports_list()
  print l, err
  #print err

if __name__ == '__main__':
  main()
